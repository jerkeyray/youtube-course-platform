generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model (Auth.js + existing functionality)
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique  // Made optional for existing NULL values
  emailVerified DateTime?
  image         String?
  bio           String?        // User's bio
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]
  
  // Existing relations
  courses       Course[]       @relation("UserCourses")
  videoProgress VideoProgress[]
  certificates  Certificate[]
  bookmarks     Bookmark[]
  watchLater    WatchLater[]
  activities    UserActivity[]
  notes         Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Auth.js models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Authenticator {
  id                String  @id @default(cuid())
  credentialID      String  @unique
  userId            String
  publicKey         String
  counter           Int
  credentialDeviceType String
  credentialBackedUp Boolean
  transports        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// Course model (YouTube playlist with deadline)
model Course {
  id          String       @id @default(cuid())
  title       String
  playlistId  String
  deadline    DateTime?    // User-set deadline
  userId      String
  user        User         @relation("UserCourses", fields: [userId], references: [id])
  videos      Video[]
  notes       Note[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  certificates Certificate[]
}

// Video model (individual YouTube videos)
model Video {
  id          String          @id @default(cuid())
  title       String
  description String?
  url         String?         // Make url optional
  videoId     String          // YouTube video ID
  order       Int             // Order in playlist
  courseId    String
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    VideoProgress[]
  bookmarks   Bookmark[]
  watchLater  WatchLater[]
  notes       Note[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  @@index([courseId])
}

// VideoProgress model (track completion)
model VideoProgress {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  completed Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

// Bookmark model (bookmarked videos)
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  note      String?  // Optional note for bookmarks
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt  // Added default value for existing rows

  @@unique([userId, videoId])
}

// WatchLater model (watch later videos)
model WatchLater {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt  // Added default value for existing rows

  @@unique([userId, videoId])
}

// Certificate model (course completion)
model Certificate {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

// UserActivity model (track daily activity and streaks)
model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  date      String   // Keep as String to maintain existing data format
  completed Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
}

// Note model
model Note {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  courseId  String
  title     String?
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}
